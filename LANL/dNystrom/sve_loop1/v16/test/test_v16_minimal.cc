
#define CATCH_CONFIG_MAIN  // This tells Catch to provide a main().

#include "../../../include/catch.h"

#include "../../../include/util_base_lite.h"

#include "../v16.h"

#include <iostream>

using namespace v16;

//============================================================================//
//
// Tests of functionality for v16 class.
//
//============================================================================//

//----------------------------------------------------------------------------//
// TEST_CASE_v16_any
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16_any", "[v16]" )
{
  v16int a;

  int i;

  for( i = 0; i < 65536; i++ )
  {
    a[ 0] = i&1,    a[ 1] = i&2,    a[ 2] = i&4,     a[ 3] = i&8;
    a[ 4] = i&16,   a[ 5] = i&32,   a[ 6] = i&64,    a[ 7] = i&128;
    a[ 8] = i&256,  a[ 9] = i&512,  a[10] = i&1024,  a[11] = i&2048;
    a[12] = i&4096, a[13] = i&8192, a[14] = i&16384, a[15] = i&32768;

    if ( i > 0 )
    {
      REQUIRE( any( a ) );
    }

    else if ( i == 0 )
    {
      REQUIRE_FALSE( any( a ) );
    }
  }
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16_all
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16_all", "[v16]" )
{
  v16int a;

  int i;

  for( i = 0; i < 65536; i++ )
  {
    a[ 0] = i&1,    a[ 1] = i&2,    a[ 2] = i&4,     a[ 3] = i&8;
    a[ 4] = i&16,   a[ 5] = i&32,   a[ 6] = i&64,    a[ 7] = i&128;
    a[ 8] = i&256,  a[ 9] = i&512,  a[10] = i&1024,  a[11] = i&2048;
    a[12] = i&4096, a[13] = i&8192, a[14] = i&16384, a[15] = i&32768;

    if ( i < 65535 )
    {
      REQUIRE_FALSE( all( a ) );
    }

    else if ( i == 65535 )
    {
      REQUIRE( all( a ) );
    }
  }
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16_transpose
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16_transpose", "[v16]" )
{
  v16int a00(   0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15 );
  v16int a01(  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31 );
  v16int a02(  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47 );
  v16int a03(  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63 );
  v16int a04(  64,  65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,  78,  79 );
  v16int a05(  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95 );
  v16int a06(  96,  97,  98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111 );
  v16int a07( 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127 );
  v16int a08( 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143 );
  v16int a09( 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159 );
  v16int a10( 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175 );
  v16int a11( 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191 );
  v16int a12( 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207 );
  v16int a13( 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223 );
  v16int a14( 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239 );
  v16int a15( 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255 );

  transpose( a00, a01, a02, a03, a04, a05, a06, a07,
             a08, a09, a10, a11, a12, a13, a14, a15 );

  REQUIRE( all( a00 == v16int(  0, 16, 32, 48, 64, 80,  96, 112, 128, 144, 160, 176, 192, 208, 224, 240 ) ) );
  REQUIRE( all( a01 == v16int(  1, 17, 33, 49, 65, 81,  97, 113, 129, 145, 161, 177, 193, 209, 225, 241 ) ) );
  REQUIRE( all( a02 == v16int(  2, 18, 34, 50, 66, 82,  98, 114, 130, 146, 162, 178, 194, 210, 226, 242 ) ) );
  REQUIRE( all( a03 == v16int(  3, 19, 35, 51, 67, 83,  99, 115, 131, 147, 163, 179, 195, 211, 227, 243 ) ) );
  REQUIRE( all( a04 == v16int(  4, 20, 36, 52, 68, 84, 100, 116, 132, 148, 164, 180, 196, 212, 228, 244 ) ) );
  REQUIRE( all( a05 == v16int(  5, 21, 37, 53, 69, 85, 101, 117, 133, 149, 165, 181, 197, 213, 229, 245 ) ) );
  REQUIRE( all( a06 == v16int(  6, 22, 38, 54, 70, 86, 102, 118, 134, 150, 166, 182, 198, 214, 230, 246 ) ) );
  REQUIRE( all( a07 == v16int(  7, 23, 39, 55, 71, 87, 103, 119, 135, 151, 167, 183, 199, 215, 231, 247 ) ) );
  REQUIRE( all( a08 == v16int(  8, 24, 40, 56, 72, 88, 104, 120, 136, 152, 168, 184, 200, 216, 232, 248 ) ) );
  REQUIRE( all( a09 == v16int(  9, 25, 41, 57, 73, 89, 105, 121, 137, 153, 169, 185, 201, 217, 233, 249 ) ) );
  REQUIRE( all( a10 == v16int( 10, 26, 42, 58, 74, 90, 106, 122, 138, 154, 170, 186, 202, 218, 234, 250 ) ) );
  REQUIRE( all( a11 == v16int( 11, 27, 43, 59, 75, 91, 107, 123, 139, 155, 171, 187, 203, 219, 235, 251 ) ) );
  REQUIRE( all( a12 == v16int( 12, 28, 44, 60, 76, 92, 108, 124, 140, 156, 172, 188, 204, 220, 236, 252 ) ) );
  REQUIRE( all( a13 == v16int( 13, 29, 45, 61, 77, 93, 109, 125, 141, 157, 173, 189, 205, 221, 237, 253 ) ) );
  REQUIRE( all( a14 == v16int( 14, 30, 46, 62, 78, 94, 110, 126, 142, 158, 174, 190, 206, 222, 238, 254 ) ) );
  REQUIRE( all( a15 == v16int( 15, 31, 47, 63, 79, 95, 111, 127, 143, 159, 175, 191, 207, 223, 239, 255 ) ) );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16_load_16x1
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16_load_16x1", "[v16]" )
{
  int i = 0;

  REQUIRE( i == 76 );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16_store_16x1
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16_store_16x1", "[v16]" )
{
  int i = 0;

  REQUIRE( i == 76 );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16_load_16x2_tr
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16_load_16x2_tr", "[v16]" )
{
  int i = 0;

  REQUIRE( i == 76 );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16_load_16x3_tr
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16_load_16x3_tr", "[v16]" )
{
  int i = 0;

  REQUIRE( i == 76 );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16_load_16x4_tr
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16_load_16x4_tr", "[v16]" )
{
  int i = 0;

  REQUIRE( i == 76 );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16_load_16x16_tr
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16_load_16x16_tr", "[v16]" )
{
  DECLARE_ALIGNED_ARRAY( int, 64, mem, 256 );

  v16int a00, a01, a02, a03, a04, a05, a06, a07,
         a08, a09, a10, a11, a12, a13, a14, a15;

  int i;

  for( i = 0; i < 256; i++ )
  {
    mem[ i ] = i;
  }

  load_16x16_tr( mem,
                 mem +  16,
                 mem +  32,
                 mem +  48,
                 mem +  64,
                 mem +  80,
                 mem +  96,
                 mem + 112,
                 mem + 128,
                 mem + 144,
                 mem + 160,
                 mem + 176,
                 mem + 192,
                 mem + 208,
                 mem + 224,
                 mem + 240,
                 a00, a01, a02, a03, a04, a05, a06, a07,
                 a08, a09, a10, a11, a12, a13, a14, a15 );

  for( i = 0; i < 256; i++ )
  {
    if ( mem[ i ] != i )
    {
      break;
    }
  }

  REQUIRE( all( a00 == v16int(  0, 16, 32, 48, 64, 80,  96, 112, 128, 144, 160, 176, 192, 208, 224, 240 ) ) );
  REQUIRE( all( a01 == v16int(  1, 17, 33, 49, 65, 81,  97, 113, 129, 145, 161, 177, 193, 209, 225, 241 ) ) );
  REQUIRE( all( a02 == v16int(  2, 18, 34, 50, 66, 82,  98, 114, 130, 146, 162, 178, 194, 210, 226, 242 ) ) );
  REQUIRE( all( a03 == v16int(  3, 19, 35, 51, 67, 83,  99, 115, 131, 147, 163, 179, 195, 211, 227, 243 ) ) );
  REQUIRE( all( a04 == v16int(  4, 20, 36, 52, 68, 84, 100, 116, 132, 148, 164, 180, 196, 212, 228, 244 ) ) );
  REQUIRE( all( a05 == v16int(  5, 21, 37, 53, 69, 85, 101, 117, 133, 149, 165, 181, 197, 213, 229, 245 ) ) );
  REQUIRE( all( a06 == v16int(  6, 22, 38, 54, 70, 86, 102, 118, 134, 150, 166, 182, 198, 214, 230, 246 ) ) );
  REQUIRE( all( a07 == v16int(  7, 23, 39, 55, 71, 87, 103, 119, 135, 151, 167, 183, 199, 215, 231, 247 ) ) );
  REQUIRE( all( a08 == v16int(  8, 24, 40, 56, 72, 88, 104, 120, 136, 152, 168, 184, 200, 216, 232, 248 ) ) );
  REQUIRE( all( a09 == v16int(  9, 25, 41, 57, 73, 89, 105, 121, 137, 153, 169, 185, 201, 217, 233, 249 ) ) );
  REQUIRE( all( a10 == v16int( 10, 26, 42, 58, 74, 90, 106, 122, 138, 154, 170, 186, 202, 218, 234, 250 ) ) );
  REQUIRE( all( a11 == v16int( 11, 27, 43, 59, 75, 91, 107, 123, 139, 155, 171, 187, 203, 219, 235, 251 ) ) );
  REQUIRE( all( a12 == v16int( 12, 28, 44, 60, 76, 92, 108, 124, 140, 156, 172, 188, 204, 220, 236, 252 ) ) );
  REQUIRE( all( a13 == v16int( 13, 29, 45, 61, 77, 93, 109, 125, 141, 157, 173, 189, 205, 221, 237, 253 ) ) );
  REQUIRE( all( a14 == v16int( 14, 30, 46, 62, 78, 94, 110, 126, 142, 158, 174, 190, 206, 222, 238, 254 ) ) );
  REQUIRE( all( a15 == v16int( 15, 31, 47, 63, 79, 95, 111, 127, 143, 159, 175, 191, 207, 223, 239, 255 ) ) );

  REQUIRE( i == 256 );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16_load_16x8_tr_p
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16_load_16x8_tr_p", "[v16]" )
{
  DECLARE_ALIGNED_ARRAY( int, 64, mem, 128 );

  v16int a00, a01, a02, a03, a04, a05, a06, a07;

  int i;

  for( i = 0; i < 128; i++ )
  {
    mem[ i ] = i;
  }

  load_16x8_tr_p( mem,
                  mem +  16,
                  mem +  32,
                  mem +  48,
                  mem +  64,
                  mem +  80,
                  mem +  96,
                  mem + 112,
                  a00, a01, a02, a03, a04, a05, a06, a07 );

  for( i = 0; i < 128; i++ )
  {
    if ( mem[ i ] != i )
    {
      break;
    }
  }

  REQUIRE( all( a00 == v16int( 0,  8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88,  96, 104, 112, 120 ) ) );
  REQUIRE( all( a01 == v16int( 1,  9, 17, 25, 33, 41, 49, 57, 65, 73, 81, 89,  97, 105, 113, 121 ) ) );
  REQUIRE( all( a02 == v16int( 2, 10, 18, 26, 34, 42, 50, 58, 66, 74, 82, 90,  98, 106, 114, 122 ) ) );
  REQUIRE( all( a03 == v16int( 3, 11, 19, 27, 35, 43, 51, 59, 67, 75, 83, 91,  99, 107, 115, 123 ) ) );
  REQUIRE( all( a04 == v16int( 4, 12, 20, 28, 36, 44, 52, 60, 68, 76, 84, 92, 100, 108, 116, 124 ) ) );
  REQUIRE( all( a05 == v16int( 5, 13, 21, 29, 37, 45, 53, 61, 69, 77, 85, 93, 101, 109, 117, 125 ) ) );
  REQUIRE( all( a06 == v16int( 6, 14, 22, 30, 38, 46, 54, 62, 70, 78, 86, 94, 102, 110, 118, 126 ) ) );
  REQUIRE( all( a07 == v16int( 7, 15, 23, 31, 39, 47, 55, 63, 71, 79, 87, 95, 103, 111, 119, 127 ) ) );

  REQUIRE( i == 128 );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16_store_16x3_tr
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16_store_16x3_tr", "[v16]" )
{
  int i = 0;

  REQUIRE( i == 76 );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16_store_16x4_tr
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16_store_16x4_tr", "[v16]" )
{
  int i = 0;

  REQUIRE( i == 76 );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16_store_16x8_tr_p
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16_store_16x8_tr_p", "[v16]" )
{
  DECLARE_ALIGNED_ARRAY( int, 64, mem, 128 );

  v16int a00( 0,  8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88,  96, 104, 112, 120 );
  v16int a01( 1,  9, 17, 25, 33, 41, 49, 57, 65, 73, 81, 89,  97, 105, 113, 121 );
  v16int a02( 2, 10, 18, 26, 34, 42, 50, 58, 66, 74, 82, 90,  98, 106, 114, 122 );
  v16int a03( 3, 11, 19, 27, 35, 43, 51, 59, 67, 75, 83, 91,  99, 107, 115, 123 );
  v16int a04( 4, 12, 20, 28, 36, 44, 52, 60, 68, 76, 84, 92, 100, 108, 116, 124 );
  v16int a05( 5, 13, 21, 29, 37, 45, 53, 61, 69, 77, 85, 93, 101, 109, 117, 125 );
  v16int a06( 6, 14, 22, 30, 38, 46, 54, 62, 70, 78, 86, 94, 102, 110, 118, 126 );
  v16int a07( 7, 15, 23, 31, 39, 47, 55, 63, 71, 79, 87, 95, 103, 111, 119, 127 );

  int i;

  for( i = 0; i < 128; i++ )
  {
    mem[ i ] = 0;
  }

  store_16x8_tr_p( a00, a01, a02, a03, a04, a05, a06, a07,
                   mem,
                   mem +  16,
                   mem +  32,
                   mem +  48,
                   mem +  64,
                   mem +  80,
                   mem +  96,
                   mem + 112 );

  for( i = 0; i < 128; i++ )
  {
    if ( mem[ i ] != i )
    {
      break;
    }
  }

  REQUIRE( all( a00 == v16int( 0,  8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88,  96, 104, 112, 120 ) ) );
  REQUIRE( all( a01 == v16int( 1,  9, 17, 25, 33, 41, 49, 57, 65, 73, 81, 89,  97, 105, 113, 121 ) ) );
  REQUIRE( all( a02 == v16int( 2, 10, 18, 26, 34, 42, 50, 58, 66, 74, 82, 90,  98, 106, 114, 122 ) ) );
  REQUIRE( all( a03 == v16int( 3, 11, 19, 27, 35, 43, 51, 59, 67, 75, 83, 91,  99, 107, 115, 123 ) ) );
  REQUIRE( all( a04 == v16int( 4, 12, 20, 28, 36, 44, 52, 60, 68, 76, 84, 92, 100, 108, 116, 124 ) ) );
  REQUIRE( all( a05 == v16int( 5, 13, 21, 29, 37, 45, 53, 61, 69, 77, 85, 93, 101, 109, 117, 125 ) ) );
  REQUIRE( all( a06 == v16int( 6, 14, 22, 30, 38, 46, 54, 62, 70, 78, 86, 94, 102, 110, 118, 126 ) ) );
  REQUIRE( all( a07 == v16int( 7, 15, 23, 31, 39, 47, 55, 63, 71, 79, 87, 95, 103, 111, 119, 127 ) ) );

  REQUIRE( i == 128 );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16_ctor_copy
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16_ctor_copy", "[v16]" )
{
  int i = 0;

  REQUIRE( i == 76 );
}

//============================================================================//
//
// Tests of functionality for v16int class.
//
//============================================================================//

//----------------------------------------------------------------------------//
// TEST_CASE_v16int_binary_op_or
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16int_binary_op_or", "[v16]" )
{
  v16int a(  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15 );
  v16int b( 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 );

  v16int c( 99 );
  v16int d( 99 );

  c = a | b;

  for( int j = 0; j < 16; j++ )
  {
    d[j] = a[j] | b[j];
    // d(j) = a(j) | b(j);
  }

  REQUIRE( all( c != v16int( 99 ) ) );
  REQUIRE( all( d != v16int( 99 ) ) );

  // REQUIRE( all( c == d ) );

  std::cout << "----------------------------------------------------------------" << std::endl;
  std::cout << "TEST_CASE_v16int_op_or"                                          << std::endl;
  std::cout << "----------------------------------------------------------------" << std::endl;

  for( int i = 0; i < 16; i++ )
  {
    std::cout << "c(" << i << ") = " << c(i) << std::endl;
  }

  std::cout << "----------------------------------------------------------------" << std::endl;

  for( int i = 0; i < 16; i++ )
  {
    std::cout << "d(" << i << ") = " << d(i) << std::endl;
  }
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16int_logical_op_eq
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16int_logical_op_eq", "[v16]" )
{
  int i = 0;

  REQUIRE( i == 76 );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16int_logical_op_ne
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16int_logical_op_ne", "[v16]" )
{
  int i = 0;

  REQUIRE( i == 76 );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16int_czero
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16int_czero", "[v16]" )
{
  v16float a( 0.0, 1.0,  2.0,  3.0,  4.0,  5.0,  6.0,  7.0,
              8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0 );

  v16float b( 10.5 );
  v16float c( 17.0 );
  v16float d( 99.0 );
  v16float e( 17.0 );

  v16int a_lt_b( 99 );

  a_lt_b = a < b;

  d = czero( a_lt_b, c );

  e = czero( a_lt_b, e );

  REQUIRE( all( a_lt_b != v16int( 99 ) ) );

  std::cout << "----------------------------------------------------------------" << std::endl;
  std::cout << "TEST_CASE_v16int_czero"                                           << std::endl;
  std::cout << "----------------------------------------------------------------" << std::endl;

  for( int i = 0; i < 16; i++ )
  {
    std::cout << "a_lt_b(" << i << ") = " << a_lt_b(i) << std::endl;
  }

  std::cout << "----------------------------------------------------------------" << std::endl;

  for( int i = 0; i < 16; i++ )
  {
    std::cout << "c(" << i << ") = " << c(i) << std::endl;
  }

  std::cout << "----------------------------------------------------------------" << std::endl;

  for( int i = 0; i < 16; i++ )
  {
    std::cout << "d(" << i << ") = " << d(i) << std::endl;
  }

  std::cout << "----------------------------------------------------------------" << std::endl;

  for( int i = 0; i < 16; i++ )
  {
    std::cout << "e(" << i << ") = " << e(i) << std::endl;
  }
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16int_merge
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16int_merge", "[v16]" )
{
  v16float a( 0.0, 1.0,  2.0,  3.0,  4.0,  5.0,  6.0,  7.0,
              8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0 );

  v16float b( 10.5 );
  v16float c( 17.0 );
  v16float d( 76.0 );
  v16float e( 17.0 );
  v16float f( 99.0 );
  v16float g( 17.0 );

  v16int a_lt_b( 99 );

  a_lt_b = a < b;

  f = merge( a_lt_b, c, d );

  g = merge( a_lt_b, g, d );

  REQUIRE( all( a_lt_b != v16int( 99 ) ) );

  std::cout << "----------------------------------------------------------------" << std::endl;
  std::cout << "TEST_CASE_v16int_merge"                                           << std::endl;
  std::cout << "----------------------------------------------------------------" << std::endl;

  for( int i = 0; i < 16; i++ )
  {
    std::cout << "a_lt_b(" << i << ") = " << a_lt_b(i) << std::endl;
  }

  std::cout << "----------------------------------------------------------------" << std::endl;

  for( int i = 0; i < 16; i++ )
  {
    std::cout << "c(" << i << ") = " << c(i) << std::endl;
  }

  std::cout << "----------------------------------------------------------------" << std::endl;

  for( int i = 0; i < 16; i++ )
  {
    std::cout << "d(" << i << ") = " << d(i) << std::endl;
  }

  std::cout << "----------------------------------------------------------------" << std::endl;

  for( int i = 0; i < 16; i++ )
  {
    std::cout << "e(" << i << ") = " << e(i) << std::endl;
  }

  std::cout << "----------------------------------------------------------------" << std::endl;

  for( int i = 0; i < 16; i++ )
  {
    std::cout << "f(" << i << ") = " << f(i) << std::endl;
  }

  std::cout << "----------------------------------------------------------------" << std::endl;

  for( int i = 0; i < 16; i++ )
  {
    std::cout << "g(" << i << ") = " << g(i) << std::endl;
  }
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16int_ctor_copy
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16int_ctor_copy", "[v16]" )
{
  int i = 0;

  REQUIRE( i == 76 );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16int_ctor_mixed
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16int_ctor_mixed", "[v16]" )
{
  int i = 0;

  REQUIRE( i == 76 );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16int_ctor_scalar
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16int_ctor_scalar", "[v16]" )
{
  int i = 0;

  REQUIRE( i == 76 );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16int_ctor_scalars
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16int_ctor_scalars", "[v16]" )
{
  int i = 0;

  REQUIRE( i == 76 );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16int_assign_eq_add
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16int_assign_eq_add", "[v16]" )
{
  int i = 0;

  REQUIRE( i == 76 );
}

//============================================================================//
//
// Tests of functionality for v16float class.
//
//============================================================================//

//----------------------------------------------------------------------------//
// TEST_CASE_v16float_binary_op_add
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16float_binary_op_add", "[v16]" )
{
  int i = 0;

  REQUIRE( i == 76 );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16float_binary_op_sub
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16float_binary_op_sub", "[v16]" )
{
  int i = 0;

  REQUIRE( i == 76 );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16float_binary_op_mul
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16float_binary_op_mul", "[v16]" )
{
  int i = 0;

  REQUIRE( i == 76 );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16float_binary_op_div
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16float_binary_op_div", "[v16]" )
{
  int i = 0;

  REQUIRE( i == 76 );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16float_logical_op_lt
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16float_logical_op_lt", "[v16]" )
{
  v16float a( 0.0, 1.0,  2.0,  3.0,  4.0,  5.0,  6.0,  7.0,
              8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0 );

  v16float b(   10.5 );
  v16float c(   16.0 );
  v16float d( -  3.0 );

  v16int a_lt_b( 99 );
  v16int a_lt_c( 99 );
  v16int a_lt_d( 99 );

  a_lt_b = a < b;

  a_lt_c = a < c;

  a_lt_d = a < d;

  REQUIRE( all( a_lt_b != v16int( 99 ) ) );
  REQUIRE( all( a_lt_c != v16int( 99 ) ) );
  REQUIRE( all( a_lt_d != v16int( 99 ) ) );

  std::cout << "----------------------------------------------------------------" << std::endl;
  std::cout << "TEST_CASE_v16float_logical_op_lt"                                 << std::endl;
  std::cout << "----------------------------------------------------------------" << std::endl;

  for( int i = 0; i < 16; i++ )
  {
    std::cout << "a_lt_b(" << i << ") = " << a_lt_b(i) << std::endl;
  }

  std::cout << "----------------------------------------------------------------" << std::endl;

  for( int i = 0; i < 16; i++ )
  {
    std::cout << "a_lt_c(" << i << ") = " << a_lt_c(i) << std::endl;
  }

  std::cout << "----------------------------------------------------------------" << std::endl;

  for( int i = 0; i < 16; i++ )
  {
    std::cout << "a_lt_d(" << i << ") = " << a_lt_d(i) << std::endl;
  }
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16float_logical_op_gt
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16float_logical_op_gt", "[v16]" )
{
  v16float a( 0.0, 1.0,  2.0,  3.0,  4.0,  5.0,  6.0,  7.0,
              8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0 );

  v16float b(   10.5 );
  v16float c(   16.0 );
  v16float d( -  3.0 );

  v16int a_gt_b( 99 );
  v16int a_gt_c( 99 );
  v16int a_gt_d( 99 );

  a_gt_b = a > b;

  a_gt_c = a > c;

  a_gt_d = a > d;

  REQUIRE( all( a_gt_b != v16int( 99 ) ) );
  REQUIRE( all( a_gt_c != v16int( 99 ) ) );
  REQUIRE( all( a_gt_d != v16int( 99 ) ) );

  std::cout << "----------------------------------------------------------------" << std::endl;
  std::cout << "TEST_CASE_v16float_logical_op_gt"                                 << std::endl;
  std::cout << "----------------------------------------------------------------" << std::endl;

  for( int i = 0; i < 16; i++ )
  {
    std::cout << "a_gt_b(" << i << ") = " << a_gt_b(i) << std::endl;
  }

  std::cout << "----------------------------------------------------------------" << std::endl;

  for( int i = 0; i < 16; i++ )
  {
    std::cout << "a_gt_c(" << i << ") = " << a_gt_c(i) << std::endl;
  }

  std::cout << "----------------------------------------------------------------" << std::endl;

  for( int i = 0; i < 16; i++ )
  {
    std::cout << "a_gt_d(" << i << ") = " << a_gt_d(i) << std::endl;
  }
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16float_logical_op_eq
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16float_logical_op_eq", "[v16]" )
{
  int i = 0;

  REQUIRE( i == 76 );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16float_logical_op_ne
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16float_logical_op_ne", "[v16]" )
{
  int i = 0;

  REQUIRE( i == 76 );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16float_sqrt
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16float_sqrt", "[v16]" )
{
  int i = 0;

  REQUIRE( i == 76 );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16float_rsqrt
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16float_rsqrt", "[v16]" )
{
  DECLARE_ALIGNED_ARRAY( float, 64, mem, 128 );

  v16float a( 1.0 /   4.0,
              1.0 /   9.0,
              1.0 /  16.0,
              1.0 /  25.0,
              1.0 /  36.0,
              1.0 /  49.0,
              1.0 /  64.0,
              1.0 /  81.0,
              1.0 / 100.0,
              1.0 / 121.0,
              1.0 / 144.0,
              1.0 / 169.0,
              1.0 / 196.0,
              1.0 / 225.0,
              1.0 / 256.0,
              1.0 / 289.0 );

  v16float b( 9.9 );

  v16float c = a;

  v16float ans(  2.0,  3.0,  4.0,  5.0,  6.0,  7.0,  8.0,  9.0,
                10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0 );

  v16float tol( 0.0001 );

  v16float err( 9.9 );

  b = rsqrt( a );

  c = rsqrt( c );

  err = sqrt( ( ans - b ) * ( ans - b ) );

  std::cout << "----------------------------------------------------------------" << std::endl;
  std::cout << "TEST_CASE_v16float_rsqrt"                                         << std::endl;
  std::cout << "----------------------------------------------------------------" << std::endl;

  for( int i = 0; i < 16; i++ )
  {
    std::cout << "err_b(" << i << ") = " << err(i) << std::endl;
  }

  std::cout << "----------------------------------------------------------------" << std::endl;

  REQUIRE( all( err < tol ) );

  err = sqrt( ( ans - c ) * ( ans - c ) );

  for( int i = 0; i < 16; i++ )
  {
    std::cout << "err_c(" << i << ") = " << err(i) << std::endl;
  }

  REQUIRE( all( err < tol ) );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16float_rcp
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16float_rcp", "[v16]" )
{
  int i = 0;

  REQUIRE( i == 76 );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16float_fma
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16float_fma", "[v16]" )
{
  DECLARE_ALIGNED_ARRAY( float, 64, mem, 128 );

  v16float a( 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0,
              8.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0 );
  v16float b( 0.6 );
  v16float c( 0.3 );
  v16float d( 9.9 );
  v16float e( 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0,
              8.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0 );
  v16float f( 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0,
              8.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0 );
  v16float g( 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0,
              8.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0 );

  v16float ans( 0.3, 0.9, 1.5, 2.1, 2.7, 3.3, 3.9, 4.5,
                5.1, 5.7, 5.1, 4.5, 3.9, 3.3, 2.7, 2.1 );
  v16float tol( 0.000001 );
  v16float err( 9.9 );

  d = fma( a, b, c );

  e = fma( e, b, c );

  f = fma( b, f, c );

  REQUIRE( all(   a == v16float( 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0,
                                 8.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0 ) ) );
  REQUIRE( all(   b == v16float( 0.6 ) ) );
  REQUIRE( all(   c == v16float( 0.3 ) ) );
  REQUIRE( all( ans == v16float( 0.3, 0.9, 1.5, 2.1, 2.7, 3.3, 3.9, 4.5,
                                 5.1, 5.7, 5.1, 4.5, 3.9, 3.3, 2.7, 2.1 ) ) );

  err = sqrt( ( ans - d ) * ( ans - d ) );

  std::cout << "----------------------------------------------------------------" << std::endl;
  std::cout << "TEST_CASE_v16float_fma"                                           << std::endl;
  std::cout << "----------------------------------------------------------------" << std::endl;

  for( int i = 0; i < 16; i++ )
  {
    std::cout << "err_d(" << i << ") = " << err(i) << std::endl;
  }

  std::cout << "----------------------------------------------------------------" << std::endl;

  REQUIRE( all( err < tol ) );

  err = sqrt( ( ans - e ) * ( ans - e ) );

  for( int i = 0; i < 16; i++ )
  {
    std::cout << "err_e(" << i << ") = " << err(i) << std::endl;
  }

  std::cout << "----------------------------------------------------------------" << std::endl;

  REQUIRE( all( err < tol ) );

  err = sqrt( ( ans - f ) * ( ans - f ) );

  for( int i = 0; i < 16; i++ )
  {
    std::cout << "err_f(" << i << ") = " << err(i) << std::endl;
  }

  REQUIRE( all( err < tol ) );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16float_fms
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16float_fms", "[v16]" )
{
  DECLARE_ALIGNED_ARRAY( float, 64, mem, 128 );

  v16float a( 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0,
              9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0 );
  v16float b( 0.6 );
  v16float c( 0.3 );
  v16float d( 9.9 );
  v16float e( 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0,
              9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0 );
  v16float f( 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0,
              9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0 );

  v16float ans( 0.3, 0.9, 1.5, 2.1, 2.7, 3.3, 3.9, 4.5,
                5.1, 4.5, 3.9, 3.3, 2.7, 2.1, 1.5, 0.9 );
  v16float tol( 0.000001 );
  v16float err( 9.9 );

  d = fms( a, b, c );

  e = fms( e, b, c );

  f = fms( b, f, c );

  REQUIRE( all(   a == v16float( 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0,
                                 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0 ) ) );
  REQUIRE( all(   b == v16float( 0.6 ) ) );
  REQUIRE( all(   c == v16float( 0.3 ) ) );
  REQUIRE( all( ans == v16float( 0.3, 0.9, 1.5, 2.1, 2.7, 3.3, 3.9, 4.5,
                                 5.1, 4.5, 3.9, 3.3, 2.7, 2.1, 1.5, 0.9 ) ) );

  err = sqrt( ( ans - d ) * ( ans - d ) );

  REQUIRE( all( err < tol ) );

  err = sqrt( ( ans - e ) * ( ans - e ) );

  REQUIRE( all( err < tol ) );

  err = sqrt( ( ans - f ) * ( ans - f ) );

  REQUIRE( all( err < tol ) );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16float_fnms
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16float_fnms", "[v16]" )
{
  int i = 0;

  REQUIRE( i == 76 );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16float_increment_16x1
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16float_increment_16x1", "[v16]" )
{
  int i = 0;

  REQUIRE( i == 76 );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16float_ctor_copy
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16float_ctor_copy", "[v16]" )
{
  int i = 0;

  REQUIRE( i == 76 );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16float_ctor_mixed
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16float_ctor_mixed", "[v16]" )
{
  int i = 0;

  REQUIRE( i == 76 );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16float_ctor_scalar
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16float_ctor_scalar", "[v16]" )
{
  int i = 0;

  REQUIRE( i == 76 );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16float_ctor_scalars
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16float_ctor_scalars", "[v16]" )
{
  int i = 0;

  REQUIRE( i == 76 );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16float_assign_eq
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16float_assign_eq", "[v16]" )
{
  int i = 0;

  REQUIRE( i == 76 );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16float_assign_eq_add
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16float_assign_eq_add", "[v16]" )
{
  int i = 0;

  REQUIRE( i == 76 );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16float_assign_eq_sub
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16float_assign_eq_sub", "[v16]" )
{
  int i = 0;

  REQUIRE( i == 76 );
}

//----------------------------------------------------------------------------//
// TEST_CASE_v16float_assign_eq_mul
//----------------------------------------------------------------------------//

TEST_CASE( "TEST_CASE_v16float_assign_eq_mul", "[v16]" )
{
  int i = 0;

  REQUIRE( i == 76 );
}

//----------------------------------------------------------------------------//
// Done.
//----------------------------------------------------------------------------//
